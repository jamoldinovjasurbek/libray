import "dotenv/config"
import { Client } from "pg";
import readline from "readline-sync";


async function addBook() {
  const title = readline.question("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: ");
  const author = readline.question("–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏: ");
  const year = readline.questionInt("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞: ");

  await Client.query(
    "INSERT INTO books (title, author, year) VALUES ($1, $2, $3)",
    [title, author, year]
  );
  console.log("‚úÖ –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n");
}

async function viewBooks() {
  const res = await Client.query("SELECT * FROM books ORDER BY id");
  if (res.rows.length === 0) {
    console.log("üì≠ –ö–Ω–∏–≥ –Ω–µ—Ç –≤ –±–∞–∑–µ.\n");
    return;
  }

  console.log("\nüìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥:");
  res.rows.forEach((book) => {
    console.log(
      `ID: ${book.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${book.title}, –ê–≤—Ç–æ—Ä: ${book.author}, –ì–æ–¥: ${book.year}`
    );
  });
  console.log();
}

async function updateBook() {
  const id = readline.questionInt("–í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏: ");
  const res = await Client.query("SELECT * FROM books WHERE id = $1", [id]);

  if (res.rows.length === 0) {
    console.log("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n");
    return;
  }

  const oldBook = res.rows[0];
  const title =
    readline.question(`–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ [${oldBook.title}]: `) || oldBook.title;
  const author =
    readline.question(`–ù–æ–≤—ã–π –∞–≤—Ç–æ—Ä [${oldBook.author}]: `) || oldBook.author;
  const year =
    readline.question(`–ù–æ–≤—ã–π –≥–æ–¥ [${oldBook.year}]: `) || oldBook.year;

  await Client.query(
    "UPDATE books SET title = $1, author = $2, year = $3 WHERE id = $4",
    [title, author, year, id]
  );
  console.log("‚úÖ –ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\n");
}

async function deleteBook() {
  const id = readline.questionInt("–í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
  const res = await Client.query("DELETE FROM books WHERE id = $1", [id]);

  if (res.rowCount === 0) {
    console.log("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n");
  } else {
    console.log("üóëÔ∏è –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞.\n");
  }
}

async function mainMenu() {
  while (true) {
    console.log("üìñ –ú–µ–Ω—é:");
    console.log("1. –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É");
    console.log("2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏");
    console.log("3. –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É");
    console.log("4. –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É");
    console.log("5. –í—ã—Ö–æ–¥");

    const choice = readline.questionInt("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

    switch (choice) {
      case 1:
        await addBook();
        break;
      case 2:
        await viewBooks();
        break;
      case 3:
        await updateBook();
        break;
      case 4:
        await deleteBook();
        break;
      case 5:
        console.log("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
        await client.end();
        process.exit(0);
      default:
        console.log("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.\n");
    }
  }
}

mainMenu();
